(defwindow bar :geometry (geometry :y 8
    :width 1904
    :anchor "top center")
    :reserve (struts :distance "44px"
        :side "top")
    (centerbox
        :class "bar-window"
        (box :space-evenly false
            (time)
            (battery)
            (system)
            (volume)
            (brightness))
        (player)
        (desktops)))


(defwindow time :geometry (geometry :x 16
    :y 60
    :anchor "top left")
    :windowtype "dialog"
    (box :class "time-window"
        (calendar :day `date +%d`
            :month `date +%m`
            :year `date +%Y`)))


(defwindow apps :geometry (geometry :width 500
    :anchor "center")
    :windowtype "dialog"
    (box :class "apps-window"
        :orientation "v"
        :space-evenly false
        (box
            (wlan)
            (bluetooth)
            (vpn)
            (microphone)
            (webcam))
        (apps)))


(defpoll hostname :interval "1s"
    `hostname`)


(defvar apps-opened false)
(defvar apps "[]")


(defvar player-music "")
(defvar player-opened false)
(defpoll player-status :interval "1s"
    :run-while player-opened
    `[ "$(playerctl -p "$PLAYER" status)" = Playing ] && echo  || echo `)


(defvar system-hovered false)
(defpoll system-user :interval "1s"
    :run-while system-hovered
    `whoami`)
(defpoll system-uptime :interval "1s"
    :run-while system-hovered
    `uptime -p | awk '{for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) }}1'`)


(defvar time-hovered false)
(defpoll time-seconds :interval "1s"
    :run-while time-hovered
    `date +%S`)
(defpoll time :interval "1s"
    `date +%H:%M`)


(defvar wlan-hovered false)
(defpoll wlan-status :interval "1s"
    :run-while apps-opened
    `[ "$($HOME/.scripts/wlan status)" = enabled ] && echo  || echo `)
(defpoll wlan-network :interval "1s"
    :run-while wlan-hovered
    `$HOME/.scripts/wlan network`)


(defvar bluetooth-hovered false)
(defpoll bluetooth-status :interval "1s"
    :run-while apps-opened
    `[ "$($HOME/.scripts/bluetooth status)" = enabled ] && echo  || echo `)


(defvar vpn-hovered false)
(defpoll vpn-status :interval "1s"
    :run-while apps-opened
    `[ "$($HOME/.scripts/vpn status)" = enabled ] && echo  || echo `)
(defpoll vpn-endpoint :interval "1s"
    :run-while vpn-hovered
    `$HOME/.scripts/vpn endpoint`)


(defpoll microphone-status :interval "1s"
    :run-while apps-opened
    `[ "$(pamixer --default-source --get-mute)" = false ] && echo  || echo `)


(defpoll webcam-status :interval "1s"
    :run-while apps-opened
    `[ "$($HOME/.scripts/webcam status)" = enabled ] && echo  || echo `)


(defvar brightness-hovered false)
(defpoll brightness :interval "1s"
    :run-while brightness-hovered
    `[ "$HOSTNAME" = notebook ] && light`)


(defvar volume-hovered false)
(defpoll volume-status :interval "1s"
    :initial "" 
    `[ "$(pamixer --get-mute)" = false ] && echo  || echo `)
(defpoll volume :interval "1s"
    :run-while volume-hovered
    `pamixer --get-volume`)


(defvar battery-hovered false)
(defpoll battery-status :interval "1s"
    `[ "$($HOME/.scripts/battery status)" = charging ] && echo  || echo `)
(defpoll battery-capacity :interval "1s"
    `$HOME/.scripts/battery capacity`)
(defpoll battery-remaining :interval "1s"
    :run-while battery-hovered
    `$HOME/.scripts/battery remaining`)


(defvar desktops "[]")


(defwidget time []
    (eventbox :onhover `eww update time-hovered=true`
        :onhoverlost `eww update time-hovered=false`
        (box :class "bar-box"
            :space-evenly false
            :tooltip time-seconds
            (label :class "bar-nested-label"
                :text "")
            (label :class "bar-nested-label"
                :text time)
            (revealer :transition "slideright"
                :reveal time-hovered
                (button :class "bar-nested-button"
                    :onclick `eww open --toggle time`
                    "")))))


(defwidget apps []
    (box :orientation "v"
        :space-evenly false
        (box :class "apps-box"
            :space-evenly false
            (label :class "apps-nested-label"
                :text "")
            (input :class "input"
                :hexpand true
                :onchange `$HOME/.scripts/apps update "{}" &`
                :onaccept `$HOME/.scripts/apps run "${apps[0].path}" &`))
        (revealer :transition "slidedown"
            :reveal apps-opened
            (scroll :class "scroll"
                :height 500
                :vscroll true
                (box :orientation "v"
                    :space-evenly false
                    (for app in apps
                        (box :space-evenly false
                            (image :class "image"
                                :path {app.icon}
                                :image-width 30
                                :image-height 30)
                            (button :class "apps-nested-button"
                                :onclick `$HOME/.scripts/apps run "${app.path}" &`
                                {app.name}))))))))


(defwidget wlan []
    (eventbox :onhover `eww update wlan-hovered=true`
        :onhoverlost `eww update wlan-hovered=false`
        :tooltip wlan-network
        (box :class "apps-box"
            :space-evenly false
            (button :class "apps-nested-button"
                :hexpand true
                :onclick `$HOME/.scripts/wlan toggle`
                wlan-status)
            (revealer :transition "slideright"
                :reveal wlan-hovered
                (button :class "apps-nested-button"
                    :hexpand true
                    :onclick `$HOME/.scripts/apps toggle & $HOME/.scripts/open iwgtk &`
                    "")))))


(defwidget bluetooth []
    (eventbox :onhover `eww update bluetooth-hovered=true`
        :onhoverlost `eww update bluetooth-hovered=false`
        (box :class "apps-box"
            :space-evenly false
            (button :class "apps-nested-button"
                :hexpand true
                :onclick `$HOME/.scripts/bluetooth toggle`
                bluetooth-status)
            (revealer :transition "slideright"
                :reveal bluetooth-hovered
                (button :class "apps-nested-button"
                    :onclick `$HOME/.scripts/apps toggle & $HOME/.scripts/open blueman-manager &`
                    "")))))


(defwidget vpn []
    (eventbox :onhover `eww update vpn-hovered=true`
        :onhoverlost `eww update vpn-hovered=false`
        :visible "${hostname == "notebook"}"
        (button :class "apps-button"
            :onclick `$HOME/.scripts/vpn toggle`
            :tooltip vpn-endpoint
            vpn-status)))


(defwidget microphone []
    (button :class "apps-button"
        :onclick `pamixer --default-source -t`
        microphone-status))


(defwidget webcam []
    (button :class "apps-button"
        :onclick `$HOME/.scripts/webcam toggle`
        webcam-status))


(defwidget brightness []
    (eventbox :onhover `eww update brightness-hovered=true`
        :onhoverlost `eww update brightness-hovered=false`
        :tooltip brightness
        (box :class "bar-box"
            :space-evenly false
            :visible "${hostname == "notebook"}"
            (label :class "bar-nested-label"
                :text "")
            (revealer :transition "slideright"
                :reveal brightness-hovered
                (eventbox :onscroll `[ {} = up ] && light -A 5 || light -U 5`
                    (scale :class "scale"
                        :value brightness
                        :min 0
                        :max 100
                        :onchange `light -S "{}"`))))))


(defwidget volume []
    (eventbox :onhover `eww update volume-hovered=true`
        :onhoverlost `eww update volume-hovered=false`
        :tooltip volume
        (box :class "bar-box"
            :space-evenly false
            (button :class "bar-nested-button"
                :onclick `pamixer -t`
                volume-status)
            (revealer :transition "slideright"
                :reveal volume-hovered
                (box :space-evenly false
                    (eventbox :onscroll `[ {} = up ] && pamixer -i 5 || pamixer -d 5`
                        (scale :class "scale"
                            :value volume
                            :min 0
                            :max 100
                            :onchange `pamixer --set-volume "{}"`))
                    (button :class "bar-nested-button"
                        :onclick `$HOME/.scripts/open pavucontrol &`
                        ""))))))


(defwidget battery []
    (eventbox :onhover `eww update battery-hovered=true`
        :onhoverlost `eww update battery-hovered=false`
        (box :class "bar-box"
            :space-evenly false
            :tooltip battery-remaining
            :visible "${hostname == "notebook"}"
            (label :class "bar-nested-label"
                :text battery-status)
            (label :class "bar-nested-label"
                :text battery-capacity))))


(defwidget desktops []
    (box :halign "end"
        :class "bar-box"
        :space-evenly false
        (for desktop in desktops
            (button :class "bar-nested-button"
                :onclick `bspc desktop -f "${desktop[0]}"`
                "${desktop[1] > 0 ? "" : ""}${desktop[1] == 0 && desktop[2] > 0 ? "" : ""}${desktop[1] == 0 && desktop[2] == 0 ? "" : ""}"))))


(defwidget system []
    (eventbox :onhover `eww update system-hovered=true`
        :onhoverlost `eww update system-hovered=false`
        (box :class "bar-box"
            :space-evenly false
            (button :class "bar-nested-button"
                :onclick `[ -f '/var/lib/pacman/db.lck' ] && notify-send 'Pacman Running' || poweroff`
                :tooltip system-uptime
                "")
            (revealer :transition "slideright"
                :reveal system-hovered
                (box :space-evenly false
                    (button :class "bar-nested-button"
                        :onclick `bspc quit`
                        :tooltip system-user
                        "")
                    (button :class "bar-nested-button"
                        :onclick `reboot`
                        ""))))))


(defwidget player []
    (box :halign "start"
        :class "bar-box"
        :space-evenly false
        (button :class "bar-nested-button"
            :onclick `$HOME/.scripts/open "$PLAYER_EXECUTABLE" &`
            "")
        (revealer :transition "slideright"
            :reveal player-opened
            (box :space-evenly false
                (label :class "bar-nested-label"
                    :text player-music)
                (button :class "bar-nested-button"
                    :onclick `playerctl -p "$PLAYER" previous`
                    "")
                (button :class "bar-nested-button"
                    :onclick `playerctl -p "$PLAYER" play-pause`
                    player-status)
                (button :class "bar-nested-button"
                    :onclick `playerctl -p "$PLAYER" next`
                    "")))))
